Домашнее задание - это небольшая часть задачек из популярной Питерской конференции HolyJS

3 студента которые заработают самые высокие оценки по этому заданию, получат небольшие поощрительные материальные призы.

Part 1

  Задание представлено в виде изображений, функции которые необходимо написать - назвать так как указано в презентации.
  Если на задание нужно дать текстовый ответ, написать задачу и ответ в виде комментария в js файле.

  1. Создать функцию mask, которая принимает строку и заменяет все символы кроме последних четырех на звездочки.(img1)

  2. Создать функцию add, которая копирует код на изображении, исправить код так, чтобы два console.log
    приведенных на изображении выводили те числа которые указаны:
    add(1)(3) // должна вернуть 4
    add(2)(5)(6) // должна вернуть 13
    (img2)

  3. Создать функцию flatArray, которая принимает массив c возможными под массивами и “плоский массив” - массив
    без подмассивов, логика продемонстрирована на изображении. (img3)

  4. Попытаться ответить для самого себя как это можно сделать.
    Написать функцию findDuplicate, которая принимает массив из последовательных целых
    чисел (начинать могут с любого числа), например:
    [-10, -9, -8] или [119, 120, 121, 122]
    Функция должна вернуть число которое повторилось.
    (img4)

  5. Создать функцию maxChainSum, которая принимает массив чисел и возвращает число, логика описана на изображении.
    * (дополнительное) создать функцию maxChain, которая принимает массив чисел и возвращает массив - 
      последовательность чисел из входного массива с самой большой суммой, логика описана на изображении.
      (img5)

Part 2

1. print
  Создать функцию print, которая принимает один аргумент - размер фигуры, возвращает строку, в которой символы
  составляют “стрелку” нужного размера, работу иллюстрируют примеры (символ ` обозначает начало и конец строки,
  в задаче необходимо использовать символ переноса строки):


      print(5)
      `
      *       *
      *     *
        *   *
        * *
          *
      `

      print(3)
      `
      *   *
      * *
        *
      `

      print(1)
      `
      *
      `

      print(2)
      `
      * *
      *
      `

2: printMirror,
  Создать функцию printMirror, которая является аналогичной print, однако строка должна представлять иную фигуру:

    print2(5)
    ` 
        *        *
      * *      * *
      *   *    *   *
    *     *  *     *
    *       **       *
    *     *  *     *
      *   *    *   *
      * *      * *
        *        *
    `

    print2(3)
    ` 
      *    *
    * *  * *
    *   **   *
    * *  * *
      *    *
    `


3: Color
  Создать класс Color, который принимает в аргументы конструктора три числа (r, g, b) и запишет их для
  дальнейшего использования в ключи создаваемого объекта с этими же названиями.
  
  Пример:

  const my = new Color(45, 43, 85);

    my.r // 45
    my.g // 43
    my.b // 85

  Создать методы:
  toString() // который вернет строку в формате: “rgb(1, 2, 3)” (без кавычек, 1 - значение r, 2 - значение g, 3 - значение b). Если число было не целым - округлить при добавлении в строку
    Пример:
    my.toString() === 'rgb(45, 43, 85)' // true
    
  toBlack() // запишет 0 во все компоненты цвета (r, g, b)
  toWhite() // запишет 255 во все компоненты цвета (r, g, b)
  getLightness() // вернет среднее арифметическое значений r, g, b
    Пример:
    my.getLightness() === 57.666666666666664 // true
    
  toGrayscale() // запишет во все компоненты r, g, b значение среднего арифметического старых значений
  invert() // инвертирует значение ключей r, g, b относительно их максимума (255), пример:
    my.invert();
    my.toString() === 'rgb(210, 212, 170)'; // true
    
  random() // генерирует случайные целые значение ключей r, g, b в пределах [0, 255] (включая 0 и 255)
  * Cоздать статический метод fromString(str), который принимает строку формата “rgb(1, 2, 3)” и возвращает новый объект Color со значениями из строки. Пример:
    const my = Color.fromString('rgb(45, 43, 85)');
    my.r; // 45
    my.g; // 43
    my.b; // 85
    
  * Ограничить максимально возможное значение которое находиться в ключах r, g, b - значением 255 (все значения больше приравнимаются к нему). Ограничить минимально возможное значение которое находиться в ключах r, g, b - значением 0 (все значения меньше приравнимаются к нему). Сделать возможным хранение только целых чисел в ключа r, g, b (все не целые округлять к ближайшему целому)
    Ограничение засаются как конструктора, так и записи вида:
    
    const my = new Color();
    my.r; // 0
    my.r = 999999;
    my.g = -99;
    my.b = 3.2;
    my.r; // 255
    my.g; // 0
    my.b; // 3
    
